@code{
    IEnumerable<IEvent> events = new List<IEvent>();

    [Parameter] public IEnumerable<IEvent> Events { get; set; }

    [Parameter] public Day CurrentDay { get; set; }

    public DailyTimeIntervals DailyIntervals { get; set; }

    public IEnumerable<DailyTimeIntervals> TimeIntervals { get => DailyTimeIntervals.TimeIntervals; }

    protected override Task OnParametersSetAsync()
    {
        if (Events != null && Events.Count() > 0)
            events = Events
                .Where(a => a.Start.Day.Equals(CurrentDay.DayOfMonth) && a.Start.Month.Equals(CurrentDay.Month) && a.Start.Year.Equals(CurrentDay.Year))
                .ToList();

        return Task.CompletedTask;
    }

    internal void SetCurrentDay(Day day)
    {
        CurrentDay = day;
    }
}
@if (CurrentDay != null)
{
<div class="card">
    <h3 class="card-header text-dark">@CurrentDay.DayOfWeek</h3>

    <div class="card-body" style="max-height:500px;overflow-y:auto;">
        <ul class="list-group">
            @foreach (var item in TimeIntervals)
            {
                @if (events != null && events.Where(a => a.Start.TimeOfDay.Equals(item.TotalTimeSpan)).Count() > 0)
                {
                    @foreach (var e in events)
                    {
                        <li class="list-group-item bg-success">
                            <a href="javascript:void(0)" class="text-left">
                                <div>@item.TotalTimeSpan: @e.Name </div>
                            </a>
                        </li>
                    }
                }
                else
                {
                    <li class="list-group-item">
                        <a href="javascript:void(0)" class="text-left">
                            <div>@item.TotalTimeSpan: OPEN </div>
                        </a>
                    </li>
                }
            }
        </ul>
    </div>
</div>
}