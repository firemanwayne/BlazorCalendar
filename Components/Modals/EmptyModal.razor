@code{
    [Parameter] public RenderFragment ComponentContent { get; set; }

    [Parameter] public string ButtonText { get; set; }

    [Parameter] public string ModalTitle { get; set; }

    [Parameter] public Func<string> Title { get; set; }

    [Parameter] public string ButtonCss { get; set; }

    [Parameter] public string IconValue { get; set; }

    [Parameter] public EventCallback OnModalOpened { get; set; }

    [Parameter] public EventCallback OnModalClosed { get; set; }

    bool Show { get; set; }

    public void OpenModal()
    {
        if (!Show)
        {
            Show = true;

            if (OnModalOpened.HasDelegate)
                OnModalOpened.InvokeAsync(this);

            if (Title == null)
                Title = () => ModalTitle;

            InvokeAsync(() => StateHasChanged());
        }
    }
    public void CloseModal()
    {
        if (Show)
        {
            Show = false;

            if (OnModalClosed.HasDelegate)
                OnModalClosed.InvokeAsync(this);

            InvokeAsync(() => StateHasChanged());
        }
    }
}

@if (Show)
{
<ModalOverlay DisplayStyle="block">
    
    <div class="modal fade show d-block" style="z-index: 1000;" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" draggable="true" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title text-dark">@Title?.Invoke()</h4>
                    <button type="button" class="close text-dark" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    @ComponentContent
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outling-secondary btn-block" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>    
</ModalOverlay>
}
